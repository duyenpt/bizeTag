@mixin border-radius($value){
  -webkit-border-radius: $value;
  -moz-border-radius: $value;
  -ms-border-radius: $value;
  border-radius: $value;
}

@mixin box-shadow($value){
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  -ms-box-shadow: $value;
  box-shadow: $value;
}
//first we'll define the folder where the sprites are and their layout
$icons: sprite-map("sprites/*.png", $layout: smart) !default;
$sprite-high-res-suffix: '-2x' !default;

//Sprite mixin, works perfectly with standard defines
@mixin use-sprite($sprite, $sprite-retina: false, $sprite-map: $icons) {
  $sprite-high-res: #{$sprite}#{$sprite-high-res-suffix};
  background-image: sprite-url($sprite-map);
  background-position: sprite-position($sprite-map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  height: image-height(sprite-file($sprite-map, $sprite));
  width: image-width(sprite-file($sprite-map, $sprite));
  display: inline-block;

  @if $sprite-retina {
    @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx) {

      background-size: (image-width(sprite-path($sprite-map)) / 2) (image-height(sprite-path($sprite-map)) / 2);
      background-position: round(nth(sprite-position($sprite-map, $sprite-high-res), 1) / 2) round(nth(sprite-position($sprite-map, $sprite-high-res), 2) / 2);
      height: image-height(sprite-file($sprite-map, $sprite));
      width: image-width(sprite-file($sprite-map, $sprite));
    }
  }

}

@mixin Roboto(){
  font-family: Roboto, Arial, Helvetica, sans-serif;
}

@mixin HelveticaNeue(){
  font-family: HelveticaNeue, Arial, Helvetica, sans-serif;
}

@mixin MyriadPro(){
  font-family: MyriadPro, Arial, Helvetica, sans-serif;
}

@mixin MyriadProCond(){
  font-family: MyriadProCond, Arial, Helvetica, sans-serif;
}
@mixin placeholder($color){

}

@mixin transform($value){
  -webkit-transform:$value;
  -moz-transform:$value;
  -o-transform:$value;
  transform:$value;
}

@mixin screen-size-max($size){
  @if $size == lg{
    @media screen and (max-width: $screen-lg){
      @content;
    }
  }
  @else if $size == md{
    @media screen and (max-width: $screen-md-max){
      @content;
    }
  }
  @else if $size == sm{
    @media screen and (max-width: $screen-sm-max){
      @content;
    }
  }
  @else if $size == xs{
    @media screen and (max-width: $screen-xs-max){
      @content;
    }
  }
}

@mixin screen-size($size){
  @if $size == lg{
    @media screen and (min-width: $screen-lg-min){
      @content;
    }
  }
  @else if $size == md{
    @media screen and (max-width: $screen-md-max) and (min-width:  $screen-md-min){
      @content;
    }
  }
  @else if $size == sm{
    @media screen and (max-width: $screen-sm-max) and (min-width:$screen-sm-min){
      @content;
    }
  }
  @else if $size == xs{
    @media screen and (max-width: $screen-xs-max){
      @content;
    }
  }
}

@mixin screen-size-min($size) {
  @if $size == lg {
    @media only screen and (min-width: $screen-lg-min) { @content; }
  }
  @else if $size == md {
    @media only screen and (min-width: $screen-md-min) { @content; }
  }

  @else if $size == sm {
    @media only screen and (min-width: $screen-sm-min) { @content; }
  }
  @else if $size == xs {
    @content;
  }
}



@mixin transition-value($value: all ease 0.3s){
  -webkit-transition:$value;
  -moz-transition:$value;
  -o-transition:$value;
  transition:$value;
}

@mixin placeholder($color){
  &::-webkit-input-placeholder { // WebKit browsers
    color: #{$color};
  }
  &:-moz-placeholder { // Mozilla Firefox 4 to 18
    color: #{$color};
    opacity:  1;
  }
  &::-moz-placeholder { // Mozilla Firefox 19+
    color: #{$color};
    opacity:  1;
  }
  &:-ms-input-placeholder { // Internet Explorer 10+
    color: #{$color};
  }
}

@mixin clearfix(){
  &:after, &:before{
    content: "";
    display: table;
    clear: both;
  }
}

@mixin FreightBigProSemiBold(){
  font-family: FreightBigProSemiBold, Arial, Helvetica, sans-serif;
}